"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";

import { DepositForm } from "@/features/account/components/DepositForm";
import { TransactionConfirmationForm } from "@/features/account/components/TransactionConfirmationForm";
import { TransactionSuccess } from "@/features/account/components/TransactionSuccess";
import { PasswordModal } from "@/components/ui/PasswordModal";
import { FormHeader } from "@/components/layout/FormHeader";
import { StepIndicator } from "@/components/ui/StepIndicator";
import { showWarningAlert, showErrorAlert } from "@/components/ui/CustomAlert";
import { accountApi, MyAccountsResponse, DepositRequest } from "@/features/account/api/accountApi";
import { mapMyAccountsApiResponse } from "@/features/account/utils/accountMapper";
import { authApi } from "@/lib/api/authApi";
import { showSuccessToast, showErrorToast } from "@/components/ui/toast";
import { colors } from "@/constants/colors";
import { useAuth } from "@/lib/hooks/useAuth";

export default function DepositPage() {
  const router = useRouter();
  const { user } = useAuth();
  const [selectedAccount, setSelectedAccount] = useState("");
  const [amount, setAmount] = useState("");
  const [depositDescription, setDepositDescription] = useState("");
  const [withdrawDescription, setWithdrawDescription] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [formStep, setFormStep] = useState(1); // 1: Í≥ÑÏ¢å ÏÑ†ÌÉù, 2: Í∏àÏï° Î©îÎ™® ÏûÖÎ†•
  const [step, setStep] = useState(1); // 1: Ï†ïÎ≥¥ÏûÖÎ†•, 2: ÌôïÏù∏, 3: ÏôÑÎ£å
  const [showPasswordModal, setShowPasswordModal] = useState(false);
  const [inputPassword, setInputPassword] = useState("");
  
  // API ÏÉÅÌÉú Í¥ÄÎ¶¨
  const [accountsData, setAccountsData] = useState<MyAccountsResponse | null>(null);
  const [mappedAccounts, setMappedAccounts] = useState<any[]>([]);
  const [isLoadingAccounts, setIsLoadingAccounts] = useState(true);
  const [accountsError, setAccountsError] = useState<string | null>(null);

  // ÏÇ¨Ïö©Ïûê Ïù¥Î¶ÑÏùÑ Í∏∞Î≥∏Í∞íÏúºÎ°ú ÏÑ§Ï†ï
  useEffect(() => {
    if (user?.customerName) {
      setDepositDescription(user.customerName);
      setWithdrawDescription(user.customerName);
    }
  }, [user?.customerName]);

  // Í≥ÑÏ¢å Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ® Ìï®Ïàò
  const handleAccountsRefresh = async () => {
    try {
      setIsLoadingAccounts(true);
      setAccountsError(null);
      
      const response = await accountApi.getMyAccounts();
      if (response.data) {
        setAccountsData(response.data);
        const mapped = mapMyAccountsApiResponse(response);
        setMappedAccounts(mapped);
      }
    } catch (err) {
      console.error('Í≥ÑÏ¢å Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ® Ïã§Ìå®:', err);
      setAccountsError('Í≥ÑÏ¢å Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    } finally {
      setIsLoadingAccounts(false);
    }
  };

  // Í≥ÑÏ¢å Î™©Î°ù Î°úÎìú
  useEffect(() => {
    handleAccountsRefresh();
  }, []);

  // Í≥ÑÏ¢å Î™©Î°ù (Îß§ÌïëÎêú Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©)
  const myAccounts = mappedAccounts;

  const selectedAccountInfo = myAccounts.find(
    (acc) => acc.accountId && acc.accountId.toString() === selectedAccount
  );
  const depositAmount = Number(amount.replace(/,/g, ""));

  const handleFormNext = () => {
    if (formStep === 1) {
      // Í≥ÑÏ¢å ÏÑ†ÌÉù Îã®Í≥Ñ
      if (!selectedAccount) {
        showWarningAlert({ title: "Í≥ÑÏ¢åÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî." });
        return;
      }
      setFormStep(2);
    } else if (formStep === 2) {
      // Í∏àÏï° ÏûÖÎ†• Îã®Í≥Ñ
      if (!amount) {
        showWarningAlert({ title: "ÏûÖÍ∏à Í∏àÏï°ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî." });
        return;
      }

      if (selectedAccountInfo && depositAmount > selectedAccountInfo.balance) {
        showErrorAlert({ title: "Í≥ÑÏ¢å ÏûîÏï°Ïù¥ Î∂ÄÏ°±Ìï©ÎãàÎã§." });
        return;
      }

      setStep(2); // ÌôïÏù∏ Îã®Í≥ÑÎ°ú Ïù¥Îèô
    }
  };

  const handleFormBack = () => {
    if (formStep === 2) {
      setFormStep(1);
    }
  };

  const handleDeposit = async () => {
    setShowPasswordModal(true);
  };

  const handlePasswordConfirm = async () => {
    if (inputPassword.length !== 6) {
      showWarningAlert({ title: "ÎπÑÎ∞ÄÎ≤àÌò∏ 6ÏûêÎ¶¨Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî." });
      return;
    }

    try {
      // 1. ÌïÄ Î≤àÌò∏ Í≤ÄÏ¶ù API Ìò∏Ï∂ú
      const pinVerificationResponse = await authApi.verifyPin(inputPassword);
      
      if (!pinVerificationResponse.success || !pinVerificationResponse.data?.valid) {
        showErrorToast("ÌïÄ Î≤àÌò∏Í∞Ä Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.");
        return;
      }

      // 2. ÌïÄ Î≤àÌò∏ Í≤ÄÏ¶ù ÏÑ±Í≥µ Ïãú ÏûÖÍ∏à Ï≤òÎ¶¨
      if (!selectedAccountInfo) {
        showErrorAlert({ title: "Í≥ÑÏ¢å Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§." });
        return;
      }

      setIsLoading(true);
      setShowPasswordModal(false);

      // API ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞ Íµ¨ÏÑ±
      const requestData: DepositRequest = {
        withdrawAccountNumber: selectedAccountInfo.accountNumber,
        withdrawBankCode: selectedAccountInfo.bank,
        amount: depositAmount,
        depositDescription: depositDescription || undefined,
        withdrawDescription: withdrawDescription || undefined,
        fromName: selectedAccountInfo.accountName,
        toName: "Î™®ÏûÑÌÜµÏû•"
      };

      // ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞ Î°úÍπÖ
      console.log("üí∞ ÏûÖÍ∏à ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞:", requestData);

      // API Ìò∏Ï∂ú
      const response = await accountApi.createDeposit(requestData);
      
      console.log("‚úÖ ÏûÖÍ∏à Ï≤òÎ¶¨ ÏôÑÎ£å:", response);

      setStep(3);
    } catch (error: any) {
      console.error('ÌïÄ Î≤àÌò∏ Í≤ÄÏ¶ù ÎòêÎäî ÏûÖÍ∏à Ï≤òÎ¶¨ Ïã§Ìå®:', error);
      showErrorToast(error.response?.data?.error?.message || error.message || "Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
      setStep(1); // Îã§Ïãú ÏûÖÎ†• Îã®Í≥ÑÎ°ú
    } finally {
      setIsLoading(false);
      setInputPassword("");
    }
  };

  const handleComplete = () => {
    router.push("/account");
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <FormHeader title="Ï±ÑÏö∞Í∏∞" useDefaultBack />

      {/* Main Content */}
      <div className="max-w-4xl mx-auto p-4 space-y-6">
        <StepIndicator
          currentStep={step}
          totalSteps={3}
          steps={["ÏûÖÍ∏à Ï†ïÎ≥¥ ÏûÖÎ†•", "ÏûÖÍ∏à ÌôïÏù∏", "ÏûÖÍ∏à ÏôÑÎ£å"]}
        />

        <div className="max-w-2xl mx-auto">
          {step === 1 && (
            <DepositForm
              step={formStep}
              accounts={myAccounts}
              selectedAccount={selectedAccount}
              onAccountChange={setSelectedAccount}
              amount={amount}
              onAmountChange={setAmount}
              depositDescription={depositDescription}
              onDepositDescriptionChange={setDepositDescription}
              withdrawDescription={withdrawDescription}
              onWithdrawDescriptionChange={setWithdrawDescription}
              onNext={handleFormNext}
              onBack={handleFormBack}
              onAccountsRefresh={handleAccountsRefresh}
            />
          )}

          {step === 2 && selectedAccountInfo && (
            <TransactionConfirmationForm
              type="deposit"
              selectedAccount={selectedAccountInfo}
              amount={depositAmount}
              depositDescription={depositDescription}
              withdrawDescription={withdrawDescription}
              onBack={() => setStep(1)}
              onConfirm={handleDeposit}
              isLoading={isLoading}
            />
          )}

          {step === 3 && selectedAccountInfo && (
            <TransactionSuccess
              type="deposit"
              selectedAccount={selectedAccountInfo}
              amount={depositAmount}
              depositDescription={depositDescription}
              withdrawDescription={withdrawDescription}
              onComplete={handleComplete}
            />
          )}

          <PasswordModal
            isOpen={showPasswordModal}
            onOpenChange={setShowPasswordModal}
            password={inputPassword}
            onPasswordChange={setInputPassword}
            onConfirm={handlePasswordConfirm}
          />
        </div>
      </div>
    </div>
  );
}
